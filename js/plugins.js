// Generated by RPG Maker.
// Do not edit this file directly.
var $plugins =
[
{"name":"相關參數設定","status":false,"description":"","parameters":{}},
{"name":"MOG_TitleSplashScreen","status":true,"description":"(v1.0) Adiciona logos antes da tela de título.","parameters":{"Number of Logos":"2","Slash Duration":"60","Splash Fade Duration":"2","Fit Screen Resolution":"true"}},
{"name":"VisuMZ_1_BattleCore","status":true,"description":"[RPG Maker MZ] [Tier 1] [Version 1.27] [BattleCore][翻譯版本:3]","parameters":{"BreakHead":"----------------------------------","BattleCore":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","AutoBattle:struct":"{\"BattleDisplay\":\"\",\"AutoBattleMsg:str\":\"Press %1 or %2 to stop Auto Battle\",\"AutoBattleOK:str\":\"OK\",\"AutoBattleCancel:str\":\"Cancel\",\"AutoBattleBgType:num\":\"1\",\"AutoBattleRect:func\":\"\\\"const width = Graphics.width;\\\\nconst height = this.calcWindowHeight(1, false);\\\\nconst x = 0;\\\\nconst y = (Graphics.height - height) / 2;\\\\nreturn new Rectangle(x, y, width, height);\\\"\",\"Options\":\"\",\"AddOption:eval\":\"true\",\"AdjustRect:eval\":\"true\",\"StartName:str\":\"Auto Battle Start\",\"StyleName:str\":\"Auto Battle Style\",\"StyleOFF:str\":\"Attack\",\"StyleON:str\":\"Skills\"}","Damage:struct":"{\"Cap\":\"\",\"EnableDamageCap:eval\":\"false\",\"DefaultHardCap:num\":\"9999\",\"EnableSoftCap:eval\":\"false\",\"DefaultSoftCap:num\":\"0.80\",\"DefaultSoftScaler:num\":\"0.1275\",\"Popups\":\"\",\"PopupDuration:num\":\"128\",\"NewPopupBottom:eval\":\"true\",\"PopupPosition:str\":\"base\",\"PopupOffsetX:num\":\"0\",\"PopupOffsetY:num\":\"0\",\"PopupShiftX:num\":\"8\",\"PopupShiftY:num\":\"-28\",\"hpDamageFmt:str\":\"-%1\",\"hpHealingFmt:str\":\"+%1\",\"mpDamageFmt:str\":\"-%1 %2\",\"mpHealingFmt:str\":\"+%1 %2\",\"CriticalColor:eval\":\"[255, 0, 0, 160]\",\"CriticalDuration:num\":\"128\",\"Formulas\":\"\",\"OverallFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst target = arguments[0];\\\\nconst critical = arguments[1];\\\\nconst item = this.item();\\\\n\\\\n// Get Base Damage\\\\nconst baseValue = this.evalDamageFormula(target);\\\\n\\\\n// Calculate Element Modifiers\\\\nlet value = baseValue * this.calcElementRate(target);\\\\n\\\\n// Calculate Physical and Magical Modifiers\\\\nif (this.isPhysical()) {\\\\n    value *= target.pdr;\\\\n}\\\\nif (this.isMagical()) {\\\\n    value *= target.mdr;\\\\n}\\\\n\\\\n// Apply Healing Modifiers\\\\nif (baseValue < 0) {\\\\n    value *= target.rec;\\\\n}\\\\n\\\\n// Apply Critical Modifiers\\\\nif (critical) {\\\\n    value = this.applyCritical(value);\\\\n}\\\\n\\\\n// Apply Variance and Guard Modifiers\\\\nvalue = this.applyVariance(value, item.damage.variance);\\\\nvalue = this.applyGuard(value, target);\\\\n\\\\n// Finalize Damage\\\\nvalue = Math.round(value);\\\\nreturn value;\\\"\",\"VarianceFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst damage = arguments[0];\\\\nconst variance = arguments[1];\\\\n\\\\n// Calculate Variance\\\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\\\n\\\\n// Return Damage\\\\nreturn damage >= 0 ? damage + v : damage - v;\\\"\",\"GuardFormulaJS:func\":\"\\\"// Declare Constants\\\\nconst damage = arguments[0];\\\\nconst target = arguments[1];\\\\n\\\\n// Return Damage Early\\\\nconst note = this.item().note;\\\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\\\nif (!target.isGuard()) return damage;\\\\nif (damage < 0) return damage;\\\\n\\\\n// Declare Guard Rate\\\\nlet guardRate = 0.5;\\\\nguardRate /= target.grd;\\\\n\\\\n// Return Damage\\\\nreturn damage * guardRate;\\\"\",\"Critical\":\"\",\"CriticalHitRateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\n\\\\n// Create Base Critical Rate\\\\nlet rate = this.subject().cri * (1 - target.cev);\\\\n\\\\n// Apply Notetags\\\\nconst note = this.item().note;\\\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\\\n    return 1;\\\\n}\\\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    return Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    rate *= Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%％])>/i)) {\\\\n    rate += Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<JS CRITICAL RATE>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS CRITICAL RATE>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    try {\\\\n        eval(code);\\\\n    } catch (e) {\\\\n        if ($gameTemp.isPlaytest()) console.log(e);\\\\n    }\\\\n}\\\\n\\\\n// Apply LUK Buffs/Debuffs\\\\nconst lukStack = this.subject().buff(7);\\\\nrate *= 2 ** lukStack;\\\\n\\\\n// Return Rate\\\\nreturn rate;\\\"\",\"CriticalHitMultiplier:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nlet damage = arguments[0];\\\\nlet multiplier = 2.0;\\\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\\\n\\\\n// Apply Notetags\\\\nconst note = this.item().note;\\\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    multiplier = Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%％])>/i)) {\\\\n    multiplier += Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\\\\\d+)([%％])>/i)) {\\\\n    bonusDamage *= Number(RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)([%％])>/i)) {\\\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\\\n}\\\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\\\\\s*([\\\\\\\\s\\\\\\\\S]*)\\\\\\\\s*<\\\\\\\\/JS CRITICAL DAMAGE>/i)) {\\\\n    const code = String(RegExp.$1);\\\\n    try {\\\\n        eval(code);\\\\n    } catch (e) {\\\\n        if ($gameTemp.isPlaytest()) console.log(e);\\\\n    }\\\\n}\\\\n\\\\n// Return Damage\\\\nreturn damage * multiplier + bonusDamage;\\\"\",\"DamageStyles\":\"\",\"DefaultDamageStyle:str\":\"Standard\",\"DamageStyleList:arraystruct\":\"[\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"Standard\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Declare Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Replace Formula\\\\\\\\\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"Armor Scaling\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Declare Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Replace Formula\\\\\\\\\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Calculate Base Armor\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Apply Armor to Damage\\\\\\\\\\\\\\\\n    if (armor >= 0) {\\\\\\\\\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"CT\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\\\\\\\\\nlet attackStat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat =  a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\\\\\\\\\nvalue = attackStat * 4;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"D4\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nlet stat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n    armor = 0;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n    armor = 0;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage \\\\\\\\\\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"DQ\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Get Primary Stats\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\nlet stat = 1;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Check for Recovery\\\\\\\\\\\\\\\\nif (this.isRecover()) {\\\\\\\\\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\\\\\\\\\n    // Plink Damage\\\\\\\\\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\\\\\\\\\n    value = baseline / 3;\\\\\\\\\\\\\\\\n} else {\\\\\\\\\\\\\\\\n    // Normal Damage\\\\\\\\\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\\\\\\\\\n    value = baseline / 2;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF7\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare base Damage\\\\\\\\\\\\\\\\nlet baseDamage = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Final Damage\\\\\\\\\\\\\\\\nlet value = baseDamage;\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nif (this.isRecover()) {\\\\\\\\\\\\\\\\n    value += 22 * power;\\\\\\\\\\\\\\\\n} else {\\\\\\\\\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF8\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Damage\\\\\\\\\\\\\\\\nlet Value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\\\\\\\\\n    value *= power / 16;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = a.mat + power;\\\\\\\\\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\\\\\\\\\n    value *= power / 256;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF9\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Constant\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Main Stats\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\nlet stat = 1;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    stat = a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    stat = a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Base Damage\\\\\\\\\\\\\\\\nlet baseDamage = power;\\\\\\\\\\\\\\\\nif (this.isPhysical()) {\\\\\\\\\\\\\\\\n    baseDamage += stat;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\\\\\\\\\n    baseDamage -= armor;\\\\\\\\\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Bonus Damage\\\\\\\\\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Final Damage\\\\\\\\\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"FF10\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Constant\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Offense Value\\\\\\\\\\\\\\\\nlet value = power;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Damage Defense Value\\\\\\\\\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= -1;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"MK\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Multiplier\\\\\\\\\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage \\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\nvalue *= multiplier;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"MOBA\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Damage Value\\\\\\\\\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    value *= a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    value *= a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Calculate Base Armor\\\\\\\\\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    // Apply Armor to Damage\\\\\\\\\\\\\\\\n    if (armor >= 0) {\\\\\\\\\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Multiplier\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Multiplier\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Multiplier\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\",\\\"{\\\\\\\"Name:str\\\\\\\":\\\\\\\"PKMN\\\\\\\",\\\\\\\"Formula:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst user = this.subject();\\\\\\\\\\\\\\\\nconst target = arguments[0];\\\\\\\\\\\\\\\\nconst item = this.item();\\\\\\\\\\\\\\\\nconst a = this.subject();\\\\\\\\\\\\\\\\nconst b = target;\\\\\\\\\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Create Power\\\\\\\\\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Declare Values\\\\\\\\\\\\\\\\nlet value = 0;\\\\\\\\\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\\\\\\\\\nlet attackStat = 0;\\\\\\\\\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat = a.atk;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\\\\\\\\\n    attackStat =  a.mat;\\\\\\\\\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.def;\\\\\\\\\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Calculate Damage\\\\\\\\\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\\\\\\\\\"\\\\\\\",\\\\\\\"ItemsEquipsCore\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"DamageType1:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType2:str\\\\\\\":\\\\\\\"%1 Damage Power\\\\\\\",\\\\\\\"DamageType3:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType4:str\\\\\\\":\\\\\\\"%1 Recovery Power\\\\\\\",\\\\\\\"DamageType5:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageType6:str\\\\\\\":\\\\\\\"%1 Drain Power\\\\\\\",\\\\\\\"DamageDisplay:func\\\\\\\":\\\\\\\"\\\\\\\\\\\\\\\"// Define Constants\\\\\\\\\\\\\\\\nconst item = this._item;\\\\\\\\\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\\\\\\\\\nconst a = this._tempActorA;\\\\\\\\\\\\\\\\nconst b = this._tempActorB;\\\\\\\\\\\\\\\\nconst user = a;\\\\\\\\\\\\\\\\nconst target = b;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n// Return Value\\\\\\\\\\\\\\\\ntry {\\\\\\\\\\\\\\\\n    return formula;\\\\\\\\\\\\\\\\n} catch (e) {\\\\\\\\\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n    return '?????';\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\"\\\\\\\"}\\\"]\"}","Mechanics:struct":"{\"ActionSpeed\":\"\",\"AllowRandomSpeed:eval\":\"false\",\"CalcActionSpeedJS:func\":\"\\\"// Declare Constants\\\\nconst agi = this.subject().agi;\\\\n\\\\n// Create Speed\\\\nlet speed = agi;\\\\nif (this.allowRandomSpeed()) {\\\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\\\n}\\\\nif (this.item()) {\\\\n    speed += this.item().speed;\\\\n}\\\\nif (this.isAttack()) {\\\\n    speed += this.subject().attackSpeed();\\\\n}\\\\n\\\\n// Return Speed\\\\nreturn speed;\\\"\",\"BaseTroop\":\"\",\"BaseTroopIDs:arraynum\":\"[\\\"1\\\"]\",\"CommonEvents\":\"\",\"BattleStartEvent:num\":\"0\",\"BattleEndEvent:num\":\"0\",\"VictoryEvent:num\":\"0\",\"DefeatEvent:num\":\"0\",\"EscapeSuccessEvent:num\":\"0\",\"EscapeFailEvent:num\":\"0\",\"Escape\":\"\",\"CalcEscapeRatioJS:func\":\"\\\"// Calculate Escape Ratio\\\\nlet ratio = 0.5;\\\\nratio *= $gameParty.agility();\\\\nratio /= $gameTroop.agility();\\\\n\\\\n// Return Ratio\\\\nreturn ratio;\\\"\",\"CalcEscapeRaiseJS:func\":\"\\\"// Calculate Escape Ratio\\\\nlet value = 0.1;\\\\nvalue += $gameParty.aliveMembers().length;\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"BattleJS\":\"\",\"PreStartBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"BattleVictoryJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"EscapeSuccessJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"EscapeFailureJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"BattleDefeatJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreEndBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndBattleJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"TurnJS\":\"\",\"PreStartTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreEndTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndTurnJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreRegenerateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostRegenerateJS:func\":\"\\\"// Declare Constants\\\\nconst user = this;\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"ActionJS\":\"\",\"PreStartActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostStartActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PreApplyJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PreDamageJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PostDamageJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PostApplyJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst target = arguments[1];\\\\nconst user = this.subject();\\\\nconst a = user;\\\\nconst b = target;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\\n// Return Value\\\\nreturn value;\\\"\",\"PreEndActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"PostEndActionJS:func\":\"\\\"// Declare Constants\\\\nconst value = arguments[0];\\\\nconst user = this.subject();\\\\nconst target = user;\\\\nconst a = user;\\\\nconst b = user;\\\\nconst action = this;\\\\nconst item = this.item();\\\\nconst skill = this.item();\\\\n\\\\n// Perform Actions\\\\n\\\"\"}","CmdWindows":"----------------------------------","BattleLayout:struct":"{\"Style:str\":\"default\",\"ListStyle\":\"\",\"ShowFacesListStyle:eval\":\"true\",\"CommandWidth:num\":\"192\",\"XPStyle\":\"\",\"XPActorCommandLines:num\":\"4\",\"XPActorDefaultHeight:num\":\"64\",\"XPSpriteYLocation:str\":\"name\",\"PotraitStyle\":\"\",\"ShowPortraits:eval\":\"true\",\"PortraitScale:num\":\"0.5\",\"BorderStyle\":\"\",\"SkillItemBorderCols:num\":\"1\",\"ShowPortraitsBorderStyle:eval\":\"true\",\"PortraitScaleBorderStyle:num\":\"1.25\",\"SkillItemWindows\":\"\",\"SkillItemMiddleLayout:eval\":\"false\",\"SkillItemStandardCols:num\":\"2\"}","BattleLog:struct":"{\"General\":\"\",\"BackColor:str\":\"#000000\",\"MaxLines:num\":\"10\",\"MessageWait:num\":\"16\",\"TextAlign:str\":\"center\",\"BattleLogRectJS:func\":\"\\\"const wx = 0;\\\\nconst wy = 0;\\\\nconst ww = Graphics.boxWidth;\\\\nconst wh = this.calcWindowHeight(10, false);\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\",\"StartTurn\":\"\",\"StartTurnShow:eval\":\"true\",\"StartTurnMsg:str\":\"Turn %1\",\"StartTurnWait:num\":\"40\",\"DisplayAction\":\"\",\"ActionCenteredName:eval\":\"true\",\"ActionSkillMsg1:eval\":\"false\",\"ActionSkillMsg2:eval\":\"true\",\"ActionItemMsg:eval\":\"false\",\"ActionChanges\":\"\",\"ShowCounter:eval\":\"true\",\"ShowReflect:eval\":\"true\",\"ShowSubstitute:eval\":\"true\",\"ActionResults\":\"\",\"ShowFailure:eval\":\"false\",\"ShowCritical:eval\":\"false\",\"ShowMissEvasion:eval\":\"false\",\"ShowHpDmg:eval\":\"false\",\"ShowMpDmg:eval\":\"false\",\"ShowTpDmg:eval\":\"false\",\"DisplayStates\":\"\",\"ShowAddedState:eval\":\"false\",\"ShowRemovedState:eval\":\"false\",\"ShowCurrentState:eval\":\"false\",\"ShowAddedBuff:eval\":\"false\",\"ShowAddedDebuff:eval\":\"false\",\"ShowRemovedBuff:eval\":\"false\"}","Battleback:struct":"{\"DefaultStyle:str\":\"MZ\",\"jsOneForOne:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst scale = 1.0;\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = 0;\\\\nthis.y = 0;\\\"\",\"jsScaleToFit:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = this.width / this.bitmap.width;\\\\nconst ratioY = this.height / this.bitmap.height;\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\",\"jsScaleDown:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\",\"jsScale Up:func\":\"\\\"// Adjust Size\\\\nthis.width = Graphics.width;\\\\nthis.height = Graphics.height;\\\\n\\\\n// Adjust Scale\\\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\\\nconst scale = Math.max(ratioX, ratioY);\\\\nthis.scale.x = scale;\\\\nthis.scale.y = scale;\\\\n\\\\n// Adjust Coordinates\\\\nthis.x = (Graphics.width - this.width) / 2;\\\\nthis.y = Graphics.height - this.height;\\\"\"}","PartyCmd:struct":"{\"Cmd\":\"\",\"CmdStyle:str\":\"auto\",\"CmdTextAlign:str\":\"left\",\"CmdIconFight:num\":\"76\",\"CommandAddAutoBattle:eval\":\"true\",\"CmdIconAutoBattle:num\":\"78\",\"CmdTextAutoBattle:str\":\"Auto\",\"CommandAddOptions:eval\":\"true\",\"CmdIconOptions:num\":\"83\",\"ActiveTpbOptionsMessage:str\":\"Options Menu queued after action is complete.\",\"CmdIconEscape:num\":\"82\",\"Access\":\"\",\"SkipPartyCmd:eval\":\"true\",\"DisablePartyCmd:eval\":\"false\",\"HelpWindow\":\"\",\"HelpFight:str\":\"Select actions to fight.\",\"HelpAutoBattle:str\":\"Sets party to Auto Battle mode.\",\"HelpOptions:str\":\"Opens up the Options Menu.\",\"HelpEscape:str\":\"Attempt to escape the battle.\"}","ActorCmd:struct":"{\"Cmd\":\"\",\"CmdStyle:str\":\"auto\",\"CmdTextAlign:str\":\"left\",\"CmdIconItem:num\":\"176\",\"IconStypeNorm:num\":\"78\",\"IconStypeMagic:num\":\"79\",\"BattleCmd\":\"\",\"BattleCmdList:arraystr\":\"[\\\"attack\\\",\\\"skills\\\",\\\"item\\\",\\\"escape\\\"]\",\"HelpWindow\":\"\",\"HelpSkillType:str\":\"Opens up a list of skills under the \\\\C[16]%1\\\\C[0] category.\",\"HelpItem:str\":\"Opens up a list of items that you can use.\",\"HelpEscape:str\":\"Attempt to escape the battle.\",\"HelpAutoBattle:str\":\"Automatically choose an action suitable for combat.\"}","VisualBreak":"----------------------------------","Actor:struct":"{\"Flinch\":\"\",\"FlinchDistanceX:num\":\"12\",\"FlinchDistanceY:num\":\"0\",\"FlinchDuration:num\":\"6\",\"SvBattlers\":\"\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"1.0\",\"ChantStyle:eval\":\"true\",\"OffsetX:num\":\"0\",\"OffsetY:num\":\"0\",\"MotionSpeed:num\":\"12\",\"PrioritySortActive:eval\":\"true\",\"PrioritySortActors:eval\":\"false\",\"Shadow:eval\":\"true\",\"SmoothImage:eval\":\"true\",\"HomePosJS:func\":\"\\\"// Declare Constants\\\\nconst sprite = this;\\\\nconst actor = this._actor;\\\\nconst index = arguments[0];\\\\n\\\\n// Make Calculations\\\\nlet x = Math.round((Graphics.width / 2) + 192)\\\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\\\nx += index * 32;\\\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\\\ny += index * 48;\\\\n\\\\n// Home Position Offsets\\\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+),[ ]([\\\\\\\\+\\\\\\\\-]\\\\\\\\d+)>/i;\\\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\\\n\\\\n// Set Home Position\\\\nthis.setHome(x, y);\\\"\"}","Enemy:struct":"{\"Visual\":\"\",\"AttackAnimation:num\":\"1\",\"EmergeText:eval\":\"false\",\"OffsetX:num\":\"0\",\"OffsetY:num\":\"0\",\"SmoothImage:eval\":\"true\",\"SelectWindow\":\"\",\"FrontViewSelect:eval\":\"false\",\"SideviewSelect:eval\":\"true\",\"NameFontSize:num\":\"22\",\"SvBattlers\":\"\",\"AllowCollapse:eval\":\"false\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"1.0\",\"MotionIdle:str\":\"walk\",\"Shadow:eval\":\"true\",\"Width:num\":\"64\",\"Height:num\":\"64\",\"WtypeId:num\":\"0\"}","HpGauge:struct":"{\"Display\":\"\",\"ShowActorGauge:eval\":\"false\",\"ShowEnemyGauge:eval\":\"true\",\"RequiresDefeat:eval\":\"false\",\"BTestBypass:eval\":\"true\",\"Settings\":\"\",\"AnchorX:num\":\"0.5\",\"AnchorY:num\":\"1.0\",\"Scale:num\":\"0.5\",\"OffsetX:num\":\"0\",\"OffsetY:num\":\"-3\",\"Options\":\"\",\"AddHpGaugeOption:eval\":\"true\",\"AdjustRect:eval\":\"true\",\"Name:str\":\"Show HP Gauge\"}","ActionSequence:struct":"{\"AutoSequences\":\"\",\"AutoMeleeSolo:eval\":\"true\",\"AutoMeleeAoE:eval\":\"true\",\"CastAnimations\":\"\",\"CastCertain:num\":\"120\",\"CastPhysical:num\":\"52\",\"CastMagical:num\":\"51\",\"CounterReflection\":\"\",\"CounterPlayback:eval\":\"true\",\"ReflectAnimation:num\":\"1\",\"ReflectPlayback:eval\":\"true\",\"Stepping\":\"\",\"MeleeDistance:num\":\"24\",\"StepDistanceX:num\":\"48\",\"StepDistanceY:num\":\"0\",\"StepDuration:num\":\"12\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_1_MessageCore","status":false,"description":"[RPG Maker MZ] [Tier 1] [Version 1.14] [MessageCore][翻譯版本:1]","parameters":{"BreakHead":"----------------------------------","MessageCore":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","General:struct":"{\"MessageWindow\":\"\",\"MessageRows:num\":\"4\",\"MessageWidth:num\":\"816\",\"FastForwardKey:str\":\"pagedown\",\"MessageTextDelay:num\":\"1\",\"StretchDimmedBg:eval\":\"true\",\"DefaultOutlineWidth:num\":\"3\",\"NameBoxWindow\":\"\",\"NameBoxWindowDefaultColor:num\":\"0\",\"NameBoxWindowOffsetX:num\":\"0\",\"NameBoxWindowOffsetY:num\":\"0\",\"ChoiceListWindow\":\"\",\"ChoiceWindowLineHeight:num\":\"36\",\"ChoiceWindowMaxRows:num\":\"8\",\"ChoiceWindowMaxCols:num\":\"1\",\"ChoiceWindowTextAlign:str\":\"default\",\"DefaultTextCodes\":\"\",\"RelativePXPY:eval\":\"true\",\"FontBiggerCap:eval\":\"108\",\"FontSmallerCap:eval\":\"12\",\"FontChangeValue:eval\":\"12\"}","AutoColor:struct":"{\"DatabaseHighlighting\":\"\",\"Actors:str\":\"0\",\"Classes:str\":\"0\",\"Skills:str\":\"0\",\"Items:str\":\"0\",\"Weapons:str\":\"0\",\"Armors:str\":\"0\",\"Enemies:str\":\"0\",\"States:str\":\"0\",\"WordHighlighting\":\"\",\"TextColor1:arraystr\":\"[]\",\"TextColor2:arraystr\":\"[]\",\"TextColor3:arraystr\":\"[]\",\"TextColor4:arraystr\":\"[]\",\"TextColor5:arraystr\":\"[]\",\"TextColor6:arraystr\":\"[]\",\"TextColor7:arraystr\":\"[]\",\"TextColor8:arraystr\":\"[]\",\"TextColor9:arraystr\":\"[]\",\"TextColor10:arraystr\":\"[]\",\"TextColor11:arraystr\":\"[]\",\"TextColor12:arraystr\":\"[]\",\"TextColor13:arraystr\":\"[]\",\"TextColor14:arraystr\":\"[]\",\"TextColor15:arraystr\":\"[]\",\"TextColor16:arraystr\":\"[]\",\"TextColor17:arraystr\":\"[]\",\"TextColor18:arraystr\":\"[]\",\"TextColor19:arraystr\":\"[]\",\"TextColor20:arraystr\":\"[]\",\"TextColor21:arraystr\":\"[]\",\"TextColor22:arraystr\":\"[]\",\"TextColor23:arraystr\":\"[]\",\"TextColor24:arraystr\":\"[]\",\"TextColor25:arraystr\":\"[]\",\"TextColor26:arraystr\":\"[]\",\"TextColor27:arraystr\":\"[]\",\"TextColor28:arraystr\":\"[]\",\"TextColor29:arraystr\":\"[]\",\"TextColor30:arraystr\":\"[]\",\"TextColor31:arraystr\":\"[]\"}","TextCodeActions:arraystruct":"[\"{\\\"Match:str\\\":\\\"ChangeFace\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst data = this.obtainEscapeString(textState).split(',');\\\\\\\\nif (textState.drawing) {\\\\\\\\n    const filename = data[0].trim();\\\\\\\\n    const index = parseInt(data[1] || '0');\\\\\\\\n    $gameMessage.setFaceImage(filename, index);\\\\\\\\n    this.loadMessageFace();\\\\\\\\n    const rtl = $gameMessage.isRTL();\\\\\\\\n    const width = ImageManager.faceWidth;\\\\\\\\n    const height = this.innerHeight;\\\\\\\\n    const x = rtl ? this.innerWidth - width - 4 : 4;\\\\\\\\n    this.contents.clearRect(x, 0, width, height);\\\\\\\\n    this._faceBitmap.addLoadListener(this.drawMessageFace.bind(this));\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"FaceIndex\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst index = this.obtainEscapeParam(textState);\\\\\\\\nif (textState.drawing) {\\\\\\\\n    const filename = $gameMessage.faceName();\\\\\\\\n    $gameMessage.setFaceImage(filename, index);\\\\\\\\n    this.loadMessageFace();\\\\\\\\n    const rtl = $gameMessage.isRTL();\\\\\\\\n    const width = ImageManager.faceWidth;\\\\\\\\n    const height = this.innerHeight;\\\\\\\\n    const x = rtl ? this.innerWidth - width - 4 : 4;\\\\\\\\n    this.contents.clearRect(x, 0, width, height);\\\\\\\\n    this._faceBitmap.addLoadListener(this.drawMessageFace.bind(this));\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"TextDelay\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst delay = this.obtainEscapeParam(textState);\\\\\\\\nif (textState.drawing && this.constructor === Window_Message) {\\\\\\\\n    this.setTextDelay(delay);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"NormalBG\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nif (textState.drawing) {\\\\\\\\n    this.setBackgroundType(0);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"DimBG\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nif (textState.drawing) {\\\\\\\\n    this.setBackgroundType(1);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"TransparentBG\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nif (textState.drawing) {\\\\\\\\n    this.setBackgroundType(2);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"FontChange\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst fontName = this.obtainEscapeString(textState);\\\\\\\\nthis.contents.fontFace = fontName;\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ResetFont\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"this.resetFontSettings();\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ResetColor\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"this.resetTextColor();\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"HexColor\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst hexColor = this.obtainEscapeString(textState);\\\\\\\\nif (!this.isColorLocked() && textState.drawing) {\\\\\\\\n    this.changeTextColor(hexColor);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"OutlineColor\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst colorIndex = this.obtainEscapeParam(textState);\\\\\\\\nif (!this.isColorLocked() && textState.drawing) {\\\\\\\\n    this.changeOutlineColor(ColorManager.textColor(colorIndex));\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"OutlineHexColor\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst hexColor = this.obtainEscapeString(textState);\\\\\\\\nif (!this.isColorLocked() && textState.drawing) {\\\\\\\\n    this.changeOutlineColor(hexColor);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"OutlineWidth\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst width = this.obtainEscapeParam(textState);\\\\\\\\nif (textState.drawing) {\\\\\\\\n    this.contents.outlineWidth = width;\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"WindowMoveTo\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst data = this.obtainEscapeString(textState).split(',');\\\\\\\\nif (textState.drawing) {\\\\\\\\n    const x = !!data[0] ? Number(data[0].trim()) : this.x;\\\\\\\\n    const y = !!data[1] ? Number(data[1].trim()) : this.y;\\\\\\\\n    const width = !!data[2] ? Number(data[2].trim()) : this.width;\\\\\\\\n    const height = !!data[3] ? Number(data[3].trim()) : this.height;\\\\\\\\n    const duration = !!data[4] ? Number(data[4].trim()) : 20;\\\\\\\\n    const easingType = !!data[5] ? data[5].trim() : 0;\\\\\\\\n    this.moveTo(x, y, width, height, duration, easingType);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"WindowMoveBy\\\",\\\"Type:str\\\":\\\"\\\\\\\\<(.*?)\\\\\\\\>\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nconst data = this.obtainEscapeString(textState).split(',');\\\\\\\\nif (textState.drawing) {\\\\\\\\n    const x = !!data[0] ? Number(data[0].trim()) : 0;\\\\\\\\n    const y = !!data[1] ? Number(data[1].trim()) : 0;\\\\\\\\n    const width = !!data[2] ? Number(data[2].trim()) : 0;\\\\\\\\n    const height = !!data[3] ? Number(data[3].trim()) : 0;\\\\\\\\n    const duration = !!data[4] ? Number(data[4].trim()) : 20;\\\\\\\\n    const easingType = !!data[5] ? data[5].trim() : 0;\\\\\\\\n    this.moveBy(x, y, width, height, duration, easingType);\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"WindowReset\\\",\\\"Type:str\\\":\\\"\\\",\\\"CommonEvent:num\\\":\\\"0\\\",\\\"ActionJS:func\\\":\\\"\\\\\\\"const textState = arguments[0];\\\\\\\\nif (textState.drawing) {\\\\\\\\n    const frames = 20;\\\\\\\\n    const easingType = 0;\\\\\\\\n    this.resetRect(frames, easingType);\\\\\\\\n}\\\\\\\"\\\"}\"]","TextCodeReplace:arraystruct":"[\"{\\\"Match:str\\\":\\\"ActorFace\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const actorId = parseInt(arguments[1]);\\\\\\\\nconst actor = $gameActors.actor(actorId);\\\\\\\\nif (this.constructor === Window_Message && actor) {\\\\\\\\n    $gameMessage.setFaceImage(\\\\\\\\n        actor.faceName(),\\\\\\\\n        actor.faceIndex()\\\\\\\\n    );\\\\\\\\n}\\\\\\\\nreturn '';\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"PartyFace\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const index = parseInt(arguments[1]) - 1;\\\\\\\\nconst actor = $gameParty.members()[index];\\\\\\\\nif (this.constructor === Window_Message && actor) {\\\\\\\\n    $gameMessage.setFaceImage(\\\\\\\\n        actor.faceName(),\\\\\\\\n        actor.faceIndex()\\\\\\\\n    );\\\\\\\\n}\\\\\\\\nreturn '';\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Class\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataClasses;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ClassName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataClasses;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Skill\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataSkills;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"SkillName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataSkills;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Item\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataItems;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ItemName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataItems;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ItemQuantity\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataItems;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nreturn $gameParty.numItems(database[id]);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Weapon\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataWeapons;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"WeaponName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataWeapons;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"WeaponQuantity\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataWeapons;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nreturn $gameParty.numItems(database[id]);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"LastGainObj\\\",\\\"Type:str\\\":\\\"\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const icon = true;\\\\\\\\nreturn this.lastGainedObjectName(icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"LastGainObjName\\\",\\\"Type:str\\\":\\\"\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const icon = false;\\\\\\\\nreturn this.lastGainedObjectName(icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"LastGainObjQuantity\\\",\\\"Type:str\\\":\\\"\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return this.lastGainedObjectQuantity();\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Armor\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataArmors;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ArmorName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataArmors;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"ArmorQuantity\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataArmors;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nreturn $gameParty.numItems(database[id]);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"State\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataStates;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"StateName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataStates;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Enemy\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataEnemies;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"EnemyName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataEnemies;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Troop\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataTroops;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"TroopName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"const database = $dataTroops;\\\\\\\\nconst id = parseInt(arguments[1]);\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"TroopMember\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"if (!$gameParty.inBattle()) return \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst index = (parseInt(arguments[1]) - 1) || 0;\\\\\\\\nconst member = $gameTroop.members()[index];\\\\\\\\nconst database = $dataEnemies;\\\\\\\\nconst id = member ? member.enemyId() : 0;\\\\\\\\nconst icon = true;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"TroopMemberName\\\",\\\"Type:str\\\":\\\"\\\\\\\\[(\\\\\\\\d+)\\\\\\\\]\\\",\\\"TextStr:str\\\":\\\"Undefined\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"if (!$gameParty.inBattle()) return \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst index = (parseInt(arguments[1]) - 1) || 0;\\\\\\\\nconst member = $gameTroop.members()[index];\\\\\\\\nconst database = $dataEnemies;\\\\\\\\nconst id = member ? member.enemyId() : 0;\\\\\\\\nconst icon = false;\\\\\\\\nreturn this.databaseObjectName(database, id, icon);\\\\\\\"\\\"}\"]","TextMacros:arraystruct":"[\"{\\\"Match:str\\\":\\\"Example Macro\\\",\\\"TextStr:str\\\":\\\"This is the text that will be displayed when you type [Example Macro].\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return 'Text';\\\\\\\"\\\"}\",\"{\\\"Match:str\\\":\\\"Leader\\\",\\\"TextStr:str\\\":\\\"\\\\\\\\P[1]\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return 'Text';\\\\\\\"\\\"}\"]","TextSpeed:struct":"{\"AddOption:eval\":\"true\",\"AdjustRect:eval\":\"true\",\"Name:str\":\"Text Speed\",\"Default:num\":\"10\",\"Instant:str\":\"Instant\"}","WordWrap:struct":"{\"EnableWordWrap\":\"\",\"MessageWindow:eval\":\"false\",\"HelpWindow:eval\":\"false\",\"Rules\":\"\",\"LineBreakSpace:eval\":\"true\",\"TightWrap:eval\":\"false\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_1_SkillsStatesCore","status":false,"description":"[RPG Maker MZ] [Tier 1] [Version 1.13] [SkillsStatesCore][翻譯版本:1]","parameters":{"BreakHead":"----------------------------------","SkillsStatesCore":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","Skills:struct":"{\"General\":\"\",\"EnableLayout:eval\":\"true\",\"LayoutStyle:str\":\"upper/left\",\"SkillTypeWindow\":\"\",\"CmdStyle:str\":\"auto\",\"CmdTextAlign:str\":\"left\",\"ListWindow\":\"\",\"ListWindowCols:num\":\"1\",\"ShopStatusWindow\":\"\",\"ShowShopStatus:eval\":\"true\",\"SkillSceneAdjustSkillList:eval\":\"true\",\"SkillMenuStatusRect:func\":\"\\\"const ww = this.shopStatusWidth();\\\\nconst wh = this._itemWindow.height;\\\\nconst wx = Graphics.boxWidth - this.shopStatusWidth();\\\\nconst wy = this._itemWindow.y;\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\",\"SkillTypes\":\"\",\"HiddenSkillTypes:arraynum\":\"[]\",\"BattleHiddenSkillTypes:arraynum\":\"[]\",\"IconStypeNorm:num\":\"78\",\"IconStypeMagic:num\":\"79\",\"CustomJS\":\"\",\"SkillConditionJS:func\":\"\\\"// Declare Variables\\\\nconst skill = arguments[0];\\\\nconst user = this;\\\\nconst target = this;\\\\nconst a = this;\\\\nconst b = this;\\\\nlet enabled = true;\\\\n\\\\n// Perform Checks\\\\n\\\\n\\\\n// Return boolean\\\\nreturn enabled;\\\"\"}","Costs:arraystruct":"[\"{\\\"Name:str\\\":\\\"HP\\\",\\\"Settings\\\":\\\"\\\",\\\"Icon:num\\\":\\\"0\\\",\\\"FontColor:str\\\":\\\"20\\\",\\\"FontSize:num\\\":\\\"22\\\",\\\"Cost\\\":\\\"\\\",\\\"CalcJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nlet cost = 0;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nconst note = skill.note;\\\\\\\\nif (note.match(/<HP COST:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost += Number(RegExp.$1);\\\\\\\\n}\\\\\\\\nif (note.match(/<HP COST:[ ](\\\\\\\\\\\\\\\\d+)([%%])>/i)) {\\\\\\\\n    cost += Math.ceil(Number(RegExp.$1) * user.mhp / 100);\\\\\\\\n}\\\\\\\\nif (note.match(/<JS HP COST>\\\\\\\\\\\\\\\\s*([\\\\\\\\\\\\\\\\s\\\\\\\\\\\\\\\\S]*)\\\\\\\\\\\\\\\\s*<\\\\\\\\\\\\\\\\/JS HP COST>/i)) {\\\\\\\\n    const code = String(RegExp.$1);\\\\\\\\n    eval(code);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Trait Cost Alterations\\\\\\\\nif (cost > 0) {\\\\\\\\n    const rateNote = /<HP COST:[ ](\\\\\\\\\\\\\\\\d+\\\\\\\\\\\\\\\\.?\\\\\\\\\\\\\\\\d*)([%%])>/i;\\\\\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\\\\\n    const flatNote = /<HP COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)>/i;\\\\\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\\\\\n    cost = Math.max(1, cost);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Set Cost Limits\\\\\\\\nif (note.match(/<HP COST MAX:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\nif (note.match(/<HP COST MIN:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return cost value\\\\\\\\nreturn Math.round(Math.max(0, cost));\\\\\\\"\\\",\\\"CanPayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nif (cost <= 0) {\\\\\\\\n    return true;\\\\\\\\n} else {\\\\\\\\n    return user._hp > cost;\\\\\\\\n}\\\\\\\"\\\",\\\"PayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Process Payment\\\\\\\\nuser._hp -= cost;\\\\\\\"\\\",\\\"Windows\\\":\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn cost > 0;\\\\\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst settings = arguments[2];\\\\\\\\nconst fontSize = settings.FontSize;\\\\\\\\nconst color = settings.FontColor;\\\\\\\\nconst name = TextManager.hp;\\\\\\\\nconst icon = settings.Icon;\\\\\\\\nlet text = '';\\\\\\\\n\\\\\\\\n// Text: Change Font Size\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\\\\\n\\\\\\\\n// Text: Add Color\\\\\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\HexColor<%1>'.format(String(RegExp.$1));\\\\\\\\n} else {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Text: Add Cost\\\\\\\\ntext += '%1 %2'.format(cost, name);\\\\\\\\n\\\\\\\\n// Text: Add Icon\\\\\\\\nif (icon  > 0) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return text\\\\\\\\nreturn text;\\\\\\\"\\\",\\\"Gauges\\\":\\\"\\\",\\\"GaugeMaxJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.mhp;\\\\\\\"\\\",\\\"GaugeCurrentJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.hp;\\\\\\\"\\\",\\\"GaugeDrawJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst sprite = this;\\\\\\\\nconst settings = sprite._costSettings;\\\\\\\\nconst bitmap = sprite.bitmap;\\\\\\\\nconst user = sprite._battler;\\\\\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\\\\\n\\\\\\\\n// Draw Gauge\\\\\\\\nconst color1 = ColorManager.hpGaugeColor1();\\\\\\\\nconst color2 = ColorManager.hpGaugeColor2();\\\\\\\\nconst gx = 0;\\\\\\\\nconst gy = sprite.bitmapHeight() - sprite.gaugeHeight();\\\\\\\\nconst gw = sprite.bitmapWidth() - gx;\\\\\\\\nconst gh = sprite.gaugeHeight();\\\\\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\\\\\n\\\\\\\\n// Draw Label\\\\\\\\nconst label = TextManager.hpA;\\\\\\\\nconst lx = 4;\\\\\\\\nconst ly = 0;\\\\\\\\nconst lw = sprite.bitmapWidth();\\\\\\\\nconst lh = sprite.bitmapHeight();\\\\\\\\nsprite.setupLabelFont();\\\\\\\\nbitmap.paintOpacity = 255;\\\\\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n// Draw Value\\\\\\\\nconst vw = sprite.bitmapWidth() - 2;\\\\\\\\nconst vh = sprite.bitmapHeight();\\\\\\\\nsprite.setupValueFont();\\\\\\\\nbitmap.textColor = ColorManager.hpColor(user);\\\\\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\");\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MP\\\",\\\"Settings\\\":\\\"\\\",\\\"Icon:num\\\":\\\"0\\\",\\\"FontColor:str\\\":\\\"23\\\",\\\"FontSize:num\\\":\\\"22\\\",\\\"Cost\\\":\\\"\\\",\\\"CalcJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nlet cost = 0;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nconst note = skill.note;\\\\\\\\ncost = Math.floor(skill.mpCost * user.mcr);\\\\\\\\nif (note.match(/<MP COST:[ ](\\\\\\\\\\\\\\\\d+)([%%])>/i)) {\\\\\\\\n    cost += Math.ceil(Number(RegExp.$1) * user.mmp / 100);\\\\\\\\n}\\\\\\\\nif (note.match(/<JS MP COST>\\\\\\\\\\\\\\\\s*([\\\\\\\\\\\\\\\\s\\\\\\\\\\\\\\\\S]*)\\\\\\\\\\\\\\\\s*<\\\\\\\\\\\\\\\\/JS MP COST>/i)) {\\\\\\\\n    const code = String(RegExp.$1);\\\\\\\\n    eval(code);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Trait Cost Alterations\\\\\\\\nif (cost > 0) {\\\\\\\\n    const rateNote = /<MP COST:[ ](\\\\\\\\\\\\\\\\d+\\\\\\\\\\\\\\\\.?\\\\\\\\\\\\\\\\d*)([%%])>/i;\\\\\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\\\\\n    const flatNote = /<MP COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)>/i;\\\\\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\\\\\n    cost = Math.max(1, cost);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Set Cost Limits\\\\\\\\nif (note.match(/<MP COST MAX:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\nif (note.match(/<MP COST MIN:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return cost value\\\\\\\\nreturn Math.round(Math.max(0, cost));\\\\\\\"\\\",\\\"CanPayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn user._mp >= cost;\\\\\\\"\\\",\\\"PayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Process Payment\\\\\\\\nuser._mp -= cost;\\\\\\\"\\\",\\\"Windows\\\":\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn cost > 0;\\\\\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst settings = arguments[2];\\\\\\\\nconst fontSize = settings.FontSize;\\\\\\\\nconst color = settings.FontColor;\\\\\\\\nconst name = TextManager.mp;\\\\\\\\nconst icon = settings.Icon;\\\\\\\\nlet text = '';\\\\\\\\n\\\\\\\\n// Text: Change Font Size\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\\\\\n\\\\\\\\n// Text: Add Color\\\\\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\\\\\n} else {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Text: Add Cost\\\\\\\\ntext += '%1 %2'.format(cost, name);\\\\\\\\n\\\\\\\\n// Text: Add Icon\\\\\\\\nif (icon  > 0) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return text\\\\\\\\nreturn text;\\\\\\\"\\\",\\\"Gauges\\\":\\\"\\\",\\\"GaugeMaxJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.mmp;\\\\\\\"\\\",\\\"GaugeCurrentJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.mp;\\\\\\\"\\\",\\\"GaugeDrawJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst sprite = this;\\\\\\\\nconst settings = sprite._costSettings;\\\\\\\\nconst bitmap = sprite.bitmap;\\\\\\\\nconst user = sprite._battler;\\\\\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\\\\\n\\\\\\\\n// Draw Gauge\\\\\\\\nconst color1 = ColorManager.mpGaugeColor1();\\\\\\\\nconst color2 = ColorManager.mpGaugeColor2();\\\\\\\\nconst gx = 0;\\\\\\\\nconst gy = sprite.bitmapHeight() - sprite.gaugeHeight();\\\\\\\\nconst gw = sprite.bitmapWidth() - gx;\\\\\\\\nconst gh = sprite.gaugeHeight();\\\\\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\\\\\n\\\\\\\\n// Draw Label\\\\\\\\nconst label = TextManager.mpA;\\\\\\\\nconst lx = 4;\\\\\\\\nconst ly = 0;\\\\\\\\nconst lw = sprite.bitmapWidth();\\\\\\\\nconst lh = sprite.bitmapHeight();\\\\\\\\nsprite.setupLabelFont();\\\\\\\\nbitmap.paintOpacity = 255;\\\\\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n// Draw Value\\\\\\\\nconst vw = sprite.bitmapWidth() - 2;\\\\\\\\nconst vh = sprite.bitmapHeight();\\\\\\\\nsprite.setupValueFont();\\\\\\\\nbitmap.textColor = ColorManager.mpColor(user);\\\\\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\");\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"TP\\\",\\\"Settings\\\":\\\"\\\",\\\"Icon:num\\\":\\\"0\\\",\\\"FontColor:str\\\":\\\"29\\\",\\\"FontSize:num\\\":\\\"22\\\",\\\"Cost\\\":\\\"\\\",\\\"CalcJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nlet cost = 0;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nconst note = skill.note;\\\\\\\\ncost = skill.tpCost;\\\\\\\\nif (note.match(/<TP COST:[ ](\\\\\\\\\\\\\\\\d+)([%%])>/i)) {\\\\\\\\n    cost += Math.ceil(Number(RegExp.$1) * user.maxTp() / 100);\\\\\\\\n}\\\\\\\\nif (note.match(/<JS TP COST>\\\\\\\\\\\\\\\\s*([\\\\\\\\\\\\\\\\s\\\\\\\\\\\\\\\\S]*)\\\\\\\\\\\\\\\\s*<\\\\\\\\\\\\\\\\/JS TP COST>/i)) {\\\\\\\\n    const code = String(RegExp.$1);\\\\\\\\n    eval(code);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Trait Cost Alterations\\\\\\\\nif (cost > 0) {\\\\\\\\n    const rateNote = /<TP COST:[ ](\\\\\\\\\\\\\\\\d+\\\\\\\\\\\\\\\\.?\\\\\\\\\\\\\\\\d*)([%%])>/i;\\\\\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\\\\\n    const flatNote = /<TP COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)>/i;\\\\\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\\\\\n    cost = Math.max(1, cost);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Set Cost Limits\\\\\\\\nif (note.match(/<TP COST MAX:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\nif (note.match(/<TP COST MIN:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return cost value\\\\\\\\nreturn Math.round(Math.max(0, cost));\\\\\\\"\\\",\\\"CanPayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn user._tp >= cost;\\\\\\\"\\\",\\\"PayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Process Payment\\\\\\\\nuser._tp -= cost;\\\\\\\"\\\",\\\"Windows\\\":\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn cost > 0;\\\\\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst settings = arguments[2];\\\\\\\\nconst fontSize = settings.FontSize;\\\\\\\\nconst color = settings.FontColor;\\\\\\\\nconst name = TextManager.tp;\\\\\\\\nconst icon = settings.Icon;\\\\\\\\nlet text = '';\\\\\\\\n\\\\\\\\n// Text: Change Font Size\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\\\\\n\\\\\\\\n// Text: Add Color\\\\\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\\\\\n} else {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Text: Add Cost\\\\\\\\ntext += '%1 %2'.format(cost, name);\\\\\\\\n\\\\\\\\n// Text: Add Icon\\\\\\\\nif (icon  > 0) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return text\\\\\\\\nreturn text;\\\\\\\"\\\",\\\"Gauges\\\":\\\"\\\",\\\"GaugeMaxJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.maxTp();\\\\\\\"\\\",\\\"GaugeCurrentJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn user.tp;\\\\\\\"\\\",\\\"GaugeDrawJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst sprite = this;\\\\\\\\nconst settings = sprite._costSettings;\\\\\\\\nconst bitmap = sprite.bitmap;\\\\\\\\nconst user = sprite._battler;\\\\\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\\\\\n\\\\\\\\n// Draw Gauge\\\\\\\\nconst color1 = ColorManager.tpGaugeColor1();\\\\\\\\nconst color2 = ColorManager.tpGaugeColor2();\\\\\\\\nconst gx = 0;\\\\\\\\nconst gy = sprite.bitmapHeight() - sprite.gaugeHeight();\\\\\\\\nconst gw = sprite.bitmapWidth() - gx;\\\\\\\\nconst gh = sprite.gaugeHeight();\\\\\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\\\\\n\\\\\\\\n// Draw Label\\\\\\\\nconst label = TextManager.tpA;\\\\\\\\nconst lx = 4;\\\\\\\\nconst ly = 0;\\\\\\\\nconst lw = sprite.bitmapWidth();\\\\\\\\nconst lh = sprite.bitmapHeight();\\\\\\\\nsprite.setupLabelFont();\\\\\\\\nbitmap.paintOpacity = 255;\\\\\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n// Draw Value\\\\\\\\nconst vw = sprite.bitmapWidth() - 2;\\\\\\\\nconst vh = sprite.bitmapHeight();\\\\\\\\nsprite.setupValueFont();\\\\\\\\nbitmap.textColor = ColorManager.tpColor(user);\\\\\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\");\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Gold\\\",\\\"Settings\\\":\\\"\\\",\\\"Icon:num\\\":\\\"0\\\",\\\"FontColor:str\\\":\\\"17\\\",\\\"FontSize:num\\\":\\\"22\\\",\\\"Cost\\\":\\\"\\\",\\\"CalcJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nlet cost = 0;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nconst note = skill.note;\\\\\\\\nif (note.match(/<GOLD COST:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost += Number(RegExp.$1);\\\\\\\\n}\\\\\\\\nif (note.match(/<GOLD COST:[ ](\\\\\\\\\\\\\\\\d+)([%%])>/i)) {\\\\\\\\n    cost += Math.ceil(Number(RegExp.$1) * $gameParty.gold() / 100);\\\\\\\\n}\\\\\\\\nif (note.match(/<JS GOLD COST>\\\\\\\\\\\\\\\\s*([\\\\\\\\\\\\\\\\s\\\\\\\\\\\\\\\\S]*)\\\\\\\\\\\\\\\\s*<\\\\\\\\\\\\\\\\/JS GOLD COST>/i)) {\\\\\\\\n    const code = String(RegExp.$1);\\\\\\\\n    eval(code);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Trait Cost Alterations\\\\\\\\nif (cost > 0) {\\\\\\\\n    const rateNote = /<GOLD COST:[ ](\\\\\\\\\\\\\\\\d+\\\\\\\\\\\\\\\\.?\\\\\\\\\\\\\\\\d*)([%%])>/i;\\\\\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\\\\\n    const flatNote = /<GOLD COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)>/i;\\\\\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\\\\\n    cost = Math.max(1, cost);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Set Cost Limits\\\\\\\\nif (note.match(/<GOLD COST MAX:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\nif (note.match(/<GOLD COST MIN:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return cost value\\\\\\\\nreturn Math.round(Math.max(0, cost));\\\\\\\"\\\",\\\"CanPayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn $gameParty.gold() >= cost;\\\\\\\"\\\",\\\"PayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Process Payment\\\\\\\\n$gameParty.loseGold(cost);\\\\\\\"\\\",\\\"Windows\\\":\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn cost > 0;\\\\\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst settings = arguments[2];\\\\\\\\nconst fontSize = settings.FontSize;\\\\\\\\nconst color = settings.FontColor;\\\\\\\\nconst name = TextManager.currencyUnit;\\\\\\\\nconst icon = settings.Icon;\\\\\\\\nlet text = '';\\\\\\\\n\\\\\\\\n// Text: Change Font Size\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\\\\\n\\\\\\\\n// Text: Add Color\\\\\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\\\\\n} else {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Text: Add Cost\\\\\\\\ntext += '%1 %2'.format(cost, name);\\\\\\\\n\\\\\\\\n// Text: Add Icon\\\\\\\\nif (icon  > 0) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\I[%1]'.format(icon);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return text\\\\\\\\nreturn text;\\\\\\\"\\\",\\\"Gauges\\\":\\\"\\\",\\\"GaugeMaxJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn $gameParty.maxGold();\\\\\\\"\\\",\\\"GaugeCurrentJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn $gameParty.gold();\\\\\\\"\\\",\\\"GaugeDrawJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst sprite = this;\\\\\\\\nconst settings = sprite._costSettings;\\\\\\\\nconst bitmap = sprite.bitmap;\\\\\\\\nconst user = sprite._battler;\\\\\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\\\\\n\\\\\\\\n// Draw Label\\\\\\\\nconst label = TextManager.currencyUnit;\\\\\\\\nconst lx = 4;\\\\\\\\nconst ly = 0;\\\\\\\\nconst lw = sprite.bitmapWidth();\\\\\\\\nconst lh = sprite.bitmapHeight();\\\\\\\\nsprite.setupLabelFont();\\\\\\\\nbitmap.paintOpacity = 255;\\\\\\\\nbitmap.drawText(label, lx, ly, lw, lh, \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n// Draw Value\\\\\\\\nconst vw = sprite.bitmapWidth() - 2;\\\\\\\\nconst vh = sprite.bitmapHeight();\\\\\\\\nsprite.setupValueFont();\\\\\\\\nbitmap.textColor = ColorManager.normalColor();\\\\\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\");\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Potion\\\",\\\"Settings\\\":\\\"\\\",\\\"Icon:num\\\":\\\"176\\\",\\\"FontColor:str\\\":\\\"0\\\",\\\"FontSize:num\\\":\\\"22\\\",\\\"Cost\\\":\\\"\\\",\\\"CalcJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nlet cost = 0;\\\\\\\\n\\\\\\\\n// Calculations\\\\\\\\nconst note = skill.note;\\\\\\\\nif (note.match(/<POTION COST:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost += Number(RegExp.$1);\\\\\\\\n}\\\\\\\\nif (note.match(/<JS POTION COST>\\\\\\\\\\\\\\\\s*([\\\\\\\\\\\\\\\\s\\\\\\\\\\\\\\\\S]*)\\\\\\\\\\\\\\\\s*<\\\\\\\\\\\\\\\\/JS POTION COST>/i)) {\\\\\\\\n    const code = String(RegExp.$1);\\\\\\\\n    eval(code);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Trait Cost Alterations\\\\\\\\nif (cost > 0) {\\\\\\\\n    const rateNote = /<POTION COST:[ ](\\\\\\\\\\\\\\\\d+\\\\\\\\\\\\\\\\.?\\\\\\\\\\\\\\\\d*)([%%])>/i;\\\\\\\\n    const rates = user.traitObjects().map((obj) => (obj && obj.note.match(rateNote) ? Number(RegExp.$1) / 100 : 1));\\\\\\\\n    const flatNote = /<POTION COST:[ ]([\\\\\\\\\\\\\\\\+\\\\\\\\\\\\\\\\-]\\\\\\\\\\\\\\\\d+)>/i;\\\\\\\\n    const flats = user.traitObjects().map((obj) => (obj && obj.note.match(flatNote) ? Number(RegExp.$1) : 0));\\\\\\\\n    cost = rates.reduce((r, rate) => r * rate, cost);\\\\\\\\n    cost = flats.reduce((r, flat) => r + flat, cost);\\\\\\\\n    cost = Math.max(1, cost);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Set Cost Limits\\\\\\\\nif (note.match(/<POTION COST MAX:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.min(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\nif (note.match(/<POTION COST MIN:[ ](\\\\\\\\\\\\\\\\d+)>/i)) {\\\\\\\\n    cost = Math.max(cost, Number(RegExp.$1));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return cost value\\\\\\\\nreturn Math.round(Math.max(0, cost));\\\\\\\"\\\",\\\"CanPayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst item = $dataItems[7];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nif (user.isActor() && cost > 0) {\\\\\\\\n    return $gameParty.numItems(item) >= cost;\\\\\\\\n} else {\\\\\\\\n    return true;\\\\\\\\n}\\\\\\\"\\\",\\\"PayJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst item = $dataItems[7];\\\\\\\\n\\\\\\\\n// Process Payment\\\\\\\\nif (user.isActor()) {\\\\\\\\n    $gameParty.loseItem(item, cost);\\\\\\\\n}\\\\\\\"\\\",\\\"Windows\\\":\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\n\\\\\\\\n// Return Boolean\\\\\\\\nreturn cost > 0;\\\\\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst item = $dataItems[7];\\\\\\\\nconst skill = arguments[0];\\\\\\\\nconst cost = arguments[1];\\\\\\\\nconst settings = arguments[2];\\\\\\\\nconst fontSize = settings.FontSize;\\\\\\\\nconst color = settings.FontColor;\\\\\\\\nconst name = settings.Name;\\\\\\\\nconst icon = settings.Icon;\\\\\\\\nlet text = '';\\\\\\\\n\\\\\\\\n// Text: Change Font Size\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\FS[%1]'.format(fontSize);\\\\\\\\n\\\\\\\\n// Text: Add Color\\\\\\\\nif (color.match(/#(.*)/i) && Imported.VisuMZ_1_MessageCore) {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\HexColor<#%1>'.format(String(RegExp.$1));\\\\\\\\n} else {\\\\\\\\n    text += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\C[%1]'.format(color);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Text: Add Cost\\\\\\\\ntext += '×%1'.format(cost);\\\\\\\\n\\\\\\\\n// Text: Add Icon\\\\\\\\ntext += '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\I[%1]'.format(item.iconIndex);\\\\\\\\n\\\\\\\\n// Return text\\\\\\\\nreturn text;\\\\\\\"\\\",\\\"Gauges\\\":\\\"\\\",\\\"GaugeMaxJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst item = $dataItems[7];\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn $gameParty.maxItems(item);\\\\\\\"\\\",\\\"GaugeCurrentJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst user = this;\\\\\\\\nconst item = $dataItems[7];\\\\\\\\n\\\\\\\\n// Return value\\\\\\\\nreturn $gameParty.numItems(item);\\\\\\\"\\\",\\\"GaugeDrawJS:func\\\":\\\"\\\\\\\"// Declare Variables\\\\\\\\nconst sprite = this;\\\\\\\\nconst settings = sprite._costSettings;\\\\\\\\nconst bitmap = sprite.bitmap;\\\\\\\\nconst user = sprite._battler;\\\\\\\\nconst item = $dataItems[7];\\\\\\\\nconst currentValue = sprite.currentDisplayedValue();\\\\\\\\n\\\\\\\\n// Draw Gauge\\\\\\\\nconst color1 = ColorManager.textColor(30);\\\\\\\\nconst color2 = ColorManager.textColor(31);\\\\\\\\nconst gx = 0;\\\\\\\\nconst gy = sprite.bitmapHeight() - sprite.gaugeHeight();\\\\\\\\nconst gw = sprite.bitmapWidth() - gx;\\\\\\\\nconst gh = sprite.gaugeHeight();\\\\\\\\nthis.drawFullGauge(color1, color2, gx, gy, gw, gh);\\\\\\\\n\\\\\\\\n// Draw Icon\\\\\\\\nconst iconIndex = item.iconIndex;\\\\\\\\nconst iconBitmap = ImageManager.loadSystem(\\\\\\\\\\\\\\\"IconSet\\\\\\\\\\\\\\\");\\\\\\\\nconst pw = ImageManager.iconWidth;\\\\\\\\nconst ph = ImageManager.iconHeight;\\\\\\\\nconst sx = (iconIndex % 16) * pw;\\\\\\\\nconst sy = Math.floor(iconIndex / 16) * ph;\\\\\\\\nbitmap.blt(iconBitmap, sx, sy, pw, ph, 0, 0, 24, 24);\\\\\\\\n\\\\\\\\n// Draw Value\\\\\\\\nconst vw = sprite.bitmapWidth() - 2;\\\\\\\\nconst vh = sprite.bitmapHeight();\\\\\\\\nsprite.setupValueFont();\\\\\\\\nbitmap.textColor = ColorManager.normalColor();\\\\\\\\nbitmap.drawText(currentValue, 0, 0, vw, vh, \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\");\\\\\\\"\\\"}\"]","BreakSkills":"----------------------------------","States:struct":"{\"General\":\"\",\"ReapplyRules:str\":\"greater\",\"MaxTurns:num\":\"99\",\"ActionEndUpdate:eval\":\"true\",\"Turns\":\"\",\"ShowTurns:eval\":\"true\",\"TurnFontSize:num\":\"16\",\"TurnOffsetX:num\":\"-4\",\"TurnOffsetY:num\":\"-6\",\"ColorNeutral:str\":\"0\",\"ColorPositive:str\":\"24\",\"ColorNegative:str\":\"27\",\"Data\":\"\",\"ShowData:eval\":\"true\",\"DataFontSize:num\":\"12\",\"DataOffsetX:num\":\"0\",\"DataOffsetY:num\":\"8\",\"CustomJS\":\"\",\"onAddStateJS:func\":\"\\\"// Declare Variables\\\\nconst stateId = arguments[0];\\\\nconst origin = this.getStateOrigin(stateId);\\\\nconst state = $dataStates[stateId];\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\"\",\"onEraseStateJS:func\":\"\\\"// Declare Variables\\\\nconst stateId = arguments[0];\\\\nconst origin = this.getStateOrigin(stateId);\\\\nconst state = $dataStates[stateId];\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onExpireStateJS:func\":\"\\\"// Declare Variables\\\\nconst stateId = arguments[0];\\\\nconst origin = this.getStateOrigin(stateId);\\\\nconst state = $dataStates[stateId];\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\"}","Buffs:struct":"{\"General\":\"\",\"ReapplyRules:str\":\"greater\",\"MaxTurns:num\":\"99\",\"Stacking\":\"\",\"StackBuffMax:num\":\"2\",\"StackDebuffMax:num\":\"2\",\"MultiplierJS:func\":\"\\\"// Declare Variables\\\\nconst user = this;\\\\nconst paramId = arguments[0];\\\\nconst buffLevel = arguments[1];\\\\nlet rate = 1;\\\\n\\\\n// Perform Calculations\\\\nrate += buffLevel * 0.25;\\\\n\\\\n// Return Rate\\\\nreturn Math.max(0, rate);\\\"\",\"Turns\":\"\",\"ShowTurns:eval\":\"true\",\"TurnFontSize:num\":\"16\",\"TurnOffsetX:num\":\"-4\",\"TurnOffsetY:num\":\"-6\",\"ColorBuff:str\":\"24\",\"ColorDebuff:str\":\"27\",\"Data\":\"\",\"ShowData:eval\":\"false\",\"DataFontSize:num\":\"12\",\"DataOffsetX:num\":\"0\",\"DataOffsetY:num\":\"8\",\"CustomJS\":\"\",\"onAddBuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onAddDebuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onEraseBuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onEraseDebuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onExpireBuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\",\"onExpireDebuffJS:func\":\"\\\"// Declare Variables\\\\nconst paramId = arguments[0];\\\\nconst modifier = this._buffs[paramId];\\\\nconst origin = this.getCurrentStateActiveUser();\\\\nconst user = this.getCurrentStateActiveUser();\\\\nconst target = this;\\\\nconst a = origin;\\\\nconst b = this;\\\\n\\\\n// Perform Actions\\\\n\\\"\"}","PassiveStates:struct":"{\"List\":\"\",\"Global:arraynum\":\"[]\",\"Actor:arraynum\":\"[]\",\"Enemy:arraynum\":\"[]\",\"CustomJS\":\"\",\"PassiveConditionJS:func\":\"\\\"// Declare Variables\\\\nconst state = arguments[0];\\\\nconst stateId = state.id;\\\\nconst user = this;\\\\nconst target = this;\\\\nconst a = this;\\\\nconst b = this;\\\\nlet condition = true;\\\\n\\\\n// Perform Checks\\\\n\\\\n\\\\n// Return boolean\\\\nreturn condition;\\\"\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}},
{"name":"VisuMZ_1_MainMenuCore","status":true,"description":"[RPG Maker MZ] [Tier 1] [Version 1.08] [MainMenuCore][翻譯版本:2]","parameters":{"BreakHead":"----------------------------------","MainMenuCore":"Plugin Parameters","ATTENTION":"READ THE HELP FILE","BreakSettings":"----------------------------------","General:struct":"{\"GoldWindow\":\"\",\"ThinGoldWindow:eval\":\"true\",\"AutoGoldHeight:eval\":\"true\",\"AutoGoldY:eval\":\"true\",\"StatusWindow\":\"\",\"StatusSelectLast:eval\":\"false\",\"SoloParty\":\"\",\"SoloQuick:eval\":\"true\",\"SubMenus\":\"\",\"ActorBgMenus:arraystr\":\"[\\\"Scene_Skill\\\"]\",\"ActorBgMenuJS:func\":\"\\\"this.anchor.x = 0.5;\\\\nconst scale = 1.25;\\\\nthis.scale.x = this.scale.y = scale;\\\\nthis.x = Graphics.width;\\\\nthis.y = Graphics.height - (this.bitmap.height * Math.abs(scale));\\\\nthis._targetX = Graphics.width * 3 / 4;\\\\nthis._targetY = Graphics.height - (this.bitmap.height * Math.abs(scale));\\\\nthis._duration = 10;\\\\nthis.opacity = 0;\\\"\",\"PartyWindow\":\"\",\"ShowReserve:eval\":\"true\",\"HideMainMenuOnly:eval\":\"true\"}","CommandList:arraystruct":"[\"{\\\"Symbol:str\\\":\\\"item\\\",\\\"Icon:num\\\":\\\"208\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.item;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return this.needsCommand(\\\\\\\\\\\\\\\"item\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.areMainCommandsEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandItem();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"const ext = arguments[0];\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"classChange\\\",\\\"Icon:num\\\":\\\"133\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.classChangeMenuCommand;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return Imported.VisuMZ_2_ClassChangeSystem &&\\\\\\\\n    this.isClassChangeCommandVisible();\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.areMainCommandsEnabled() &&\\\\\\\\n    this.isClassChangeCommandEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandPersonal();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"SceneManager.push(Scene_ClassChange);\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"skill\\\",\\\"Icon:num\\\":\\\"101\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.skill;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return this.needsCommand(\\\\\\\\\\\\\\\"skill\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.areMainCommandsEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandPersonal();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"SceneManager.push(Scene_Skill);\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"equip\\\",\\\"Icon:num\\\":\\\"137\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.equip;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return this.needsCommand(\\\\\\\\\\\\\\\"equip\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.areMainCommandsEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandPersonal();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"SceneManager.push(Scene_Equip);\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"status\\\",\\\"Icon:num\\\":\\\"82\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.status;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return this.needsCommand(\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.areMainCommandsEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandPersonal();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"SceneManager.push(Scene_Status);\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"itemCrafting\\\",\\\"Icon:num\\\":\\\"223\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.ItemCraftingMenuCommand;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return Imported.VisuMZ_2_ItemCraftingSys &&\\\\\\\\n    this.isItemCraftingCommandVisible();\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.isItemCraftingCommandEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandItemCrafting();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"const ext = arguments[0];\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"quest\\\",\\\"Icon:num\\\":\\\"186\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.questCommandName;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return Imported.VisuMZ_2_QuestSystem &&\\\\\\\\n    this.isQuestCommandVisible();\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.isQuestCommandEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandQuest();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"const ext = arguments[0];\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"combatLog\\\",\\\"Icon:num\\\":\\\"189\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.combatLog_BattleCmd_Name;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return Imported.VisuMZ_4_CombatLog &&\\\\\\\\n    this.isCombatLogCommandVisible();\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.isCombatLogCommandEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandCombatLog();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"const ext = arguments[0];\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"formation\\\",\\\"Icon:num\\\":\\\"75\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.formation;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return this.needsCommand(\\\\\\\\\\\\\\\"formation\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.isFormationEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandFormation();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"const ext = arguments[0];\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"options\\\",\\\"Icon:num\\\":\\\"83\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.options;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return this.needsCommand(\\\\\\\\\\\\\\\"options\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.isOptionsEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandOptions();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"const ext = arguments[0];\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"save\\\",\\\"Icon:num\\\":\\\"189\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.save;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return this.needsCommand(\\\\\\\\\\\\\\\"save\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.isSaveEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandSave();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"const ext = arguments[0];\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"commonEvent1\\\",\\\"Icon:num\\\":\\\"88\\\",\\\"TextStr:str\\\":\\\"Common Event 1\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return 'Text';\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return false;\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return true;\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return 1;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandCommonEvent();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"const ext = arguments[0];\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"commonEvent2\\\",\\\"Icon:num\\\":\\\"87\\\",\\\"TextStr:str\\\":\\\"Common Event 2\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return 'Text';\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return false;\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.areMainCommandsEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return 2;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandPersonal();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"// Declare Ext\\\\\\\\nconst ext = arguments[0];\\\\\\\\n\\\\\\\\n// Declare Status Window\\\\\\\\nconst statusWindow = SceneManager._scene._statusWindow;\\\\\\\\n\\\\\\\\n// Declare Actor ID\\\\\\\\nconst actorId = statusWindow.actor(statusWindow.index()).actorId();\\\\\\\\n\\\\\\\\n// Set variable 1 to Actor ID\\\\\\\\n$gameVariables.setValue(1, actorId);\\\\\\\\n\\\\\\\\n// Prepare Common Event ext to run\\\\\\\\n$gameTemp.reserveCommonEvent(ext);\\\\\\\\n\\\\\\\\n// Exit Main Menu\\\\\\\\nSceneManager._scene.popScene();\\\\\\\"\\\"}\",\"{\\\"Symbol:str\\\":\\\"gameEnd\\\",\\\"Icon:num\\\":\\\"187\\\",\\\"TextStr:str\\\":\\\"\\\",\\\"TextJS:func\\\":\\\"\\\\\\\"return TextManager.gameEnd;\\\\\\\"\\\",\\\"ShowJS:func\\\":\\\"\\\\\\\"return this.needsCommand(\\\\\\\\\\\\\\\"gameEnd\\\\\\\\\\\\\\\");\\\\\\\"\\\",\\\"EnableJS:func\\\":\\\"\\\\\\\"return this.isGameEndEnabled();\\\\\\\"\\\",\\\"ExtJS:func\\\":\\\"\\\\\\\"return null;\\\\\\\"\\\",\\\"CallHandlerJS:func\\\":\\\"\\\\\\\"SceneManager._scene.commandGameEnd();\\\\\\\"\\\",\\\"PersonalHandlerJS:func\\\":\\\"\\\\\\\"const ext = arguments[0];\\\\\\\"\\\"}\"]","Playtime:struct":"{\"Enable:eval\":\"true\",\"AdjustCommandHeight:func\":\"true\",\"BgType:num\":\"0\",\"FontSize:num\":\"24\",\"Icon:num\":\"75\",\"Time:str\":\"Time\",\"WindowRect:func\":\"\\\"const rows = 1;\\\\nconst ww = this.mainCommandWidth();\\\\nconst wh = this.calcWindowHeight(rows, false);\\\\nconst wx = this.isRightInputMode() ? Graphics.boxWidth - ww : 0;\\\\nlet wy = this.mainAreaBottom() - wh;\\\\nif (this._goldWindow) wy -= this._goldWindow.height;\\\\nif (this.canCreateVariableWindow()) wy -= this.variableWindowRect().height;\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\"}","Variable:struct":"{\"Enable:eval\":\"false\",\"AdjustCommandHeight:func\":\"true\",\"BgType:num\":\"0\",\"FontSize:num\":\"24\",\"VarList:arraynum\":\"[\\\"1\\\",\\\"2\\\"]\",\"WindowRect:func\":\"\\\"const rows = VisuMZ.MainMenuCore.Settings.Variable.VarList.length;\\\\nconst ww = this.mainCommandWidth();\\\\nconst wh = this.calcWindowHeight(rows, false);\\\\nconst wx = this.isRightInputMode() ? Graphics.boxWidth - ww : 0;\\\\nlet wy = this.mainAreaBottom() - wh;\\\\nif (this._goldWindow) wy -= this._goldWindow.height;\\\\nreturn new Rectangle(wx, wy, ww, wh);\\\"\"}","ParamBreak1":"----------------------------------","CommandWindowStyle:str":"top","CustomCmdWin:struct":"{\"Style:str\":\"auto\",\"TextAlign:str\":\"center\",\"Rows:num\":\"2\",\"Cols:num\":\"4\",\"MobileThickness:num\":\"5\"}","ParamBreak2":"----------------------------------","StatusGraphic:str":"face","StatusListStyle:str":"portrait","InnerMenuListStyle:str":"default","ListStyles:struct":"{\"DefaultStyle:func\":\"\\\"// Declare Constants\\\\nconst actor = arguments[0];\\\\nconst rect = arguments[1];\\\\n\\\\n// Draw Actor Graphic\\\\nconst gx = rect.x + (this.graphicType() === 'face' ? 1 : 0);\\\\nconst gy = rect.y + (this.graphicType() === 'face' ? 1 : 0);\\\\nconst gw = Math.min(rect.width, ImageManager.faceWidth);\\\\nconst gh = Math.min(rect.height, ImageManager.faceHeight);\\\\nthis.drawActorGraphic(actor, gx, gy, gw, gh);\\\\n\\\\n// Draw Status Stuff\\\\nconst sx = rect.x + 180;\\\\nconst sy = rect.y + rect.height / 2 - this.lineHeight() * 1.5;\\\\nconst lineHeight = this.lineHeight();\\\\nconst sx2 = sx + 180;\\\\nthis.drawActorName(actor, sx, sy);\\\\nthis.drawActorLevel(actor, sx, sy + lineHeight * 1);\\\\nthis.drawActorIcons(actor, sx, sy + lineHeight * 2);\\\\nthis.drawActorClass(actor, sx2, sy);\\\\n\\\\n// Place Gauges\\\\nconst sy2 = sy + lineHeight;\\\\nconst gaugeLineHeight = this.gaugeLineHeight();\\\\nthis.placeGauge(actor, \\\\\\\"hp\\\\\\\", sx2, sy2);\\\\nthis.placeGauge(actor, \\\\\\\"mp\\\\\\\", sx2, sy2 + gaugeLineHeight);\\\\nconst roomForTp = (sy2 + gaugeLineHeight * 3) <= rect.y + rect.height;\\\\nif ($dataSystem.optDisplayTp && roomForTp) {\\\\n    this.placeGauge(actor, \\\\\\\"tp\\\\\\\", sx2, sy2 + gaugeLineHeight * 2);\\\\n}\\\\n\\\\n// Following Requires VisuStella MZ's Core Engine\\\\n// Draw Additional Parameter Data if Enough Room\\\\nconst sx3 = sx2 + 180;\\\\nconst sw = rect.width - sx3 - 2;\\\\nif (Imported.VisuMZ_0_CoreEngine && sw >= 300) {\\\\n    const params = VisuMZ.CoreEngine.Settings.Param.DisplayedParams;\\\\n    const pw = Math.floor(sw / 2) - 24;\\\\n    let px = sx3;\\\\n    let py = rect.y + Math.floor((rect.height - (Math.ceil(params.length / 2) * gaugeLineHeight)) / 2);\\\\n    let counter = 0;\\\\n    for (const param of params) {\\\\n        this.resetFontSettings();\\\\n        this.drawParamText(px, py, pw, param, true);\\\\n        this.resetTextColor();\\\\n        this.contents.fontSize -= 8;\\\\n        const paramValue = actor.paramValueByName(param, true);\\\\n        this.contents.drawText(paramValue, px, py, pw, gaugeLineHeight, 'right');\\\\n        counter++;\\\\n        if (counter % 2 === 0) {\\\\n            px = sx3;\\\\n            py += gaugeLineHeight;\\\\n        } else {\\\\n            px += pw + 24;\\\\n        }\\\\n    }\\\\n}\\\"\",\"VerticalStyle:func\":\"\\\"// Declare Constants\\\\nconst actor = arguments[0];\\\\nconst rect = arguments[1];\\\\n\\\\n\\\\nconst lineHeight = this.lineHeight();\\\\nconst gaugeLineHeight = this.gaugeLineHeight();\\\\nconst totalHeight = (lineHeight * 4.5) + (gaugeLineHeight * ($dataSystem.optDisplayTp ? 3 : 2));\\\\n\\\\n// Draw Actor Graphic\\\\nconst gw = rect.width;\\\\nconst gh = Math.min(rect.height, ImageManager.faceHeight);\\\\nconst gx = rect.x;\\\\nconst gy = Math.max(rect.y, rect.y + (rect.height - totalHeight - gh) / 2);\\\\nthis.drawActorGraphic(actor, gx, gy, gw, gh);\\\\n\\\\n// Draw Actor Name\\\\nlet sx = rect.x;\\\\nlet sy = Math.max(gy + gh, rect.y + (rect.height - totalHeight + gh) / 2);\\\\nlet sw = rect.width;\\\\nthis.drawText(actor.name(), sx, sy, sw, 'center');\\\\n\\\\n// Draw Actor Level\\\\nsx = rect.x + Math.round((rect.width - 128) / 2);\\\\nsy += lineHeight;\\\\nthis.drawActorLevel(actor, sx, sy);\\\\n\\\\n// Draw Actor Class\\\\nconst className = actor.currentClass().name;\\\\nsx = rect.x + Math.round((rect.width - this.textSizeEx(className).width) / 2);\\\\nsy += lineHeight;\\\\nthis.drawTextEx(className, sx, sy, sw);\\\\n\\\\n// Draw Actor Icons\\\\nsx = rect.x + Math.round((rect.width - 128) / 2);\\\\nsy += lineHeight;\\\\nthis.drawActorIcons(actor, sx, sy);\\\\n\\\\n// Draw Gauges\\\\nsx = rect.x + Math.round((rect.width - 128) / 2);\\\\nsy += lineHeight;\\\\nthis.placeGauge(actor, \\\\\\\"hp\\\\\\\", sx, sy);\\\\nsy += gaugeLineHeight;\\\\nthis.placeGauge(actor, \\\\\\\"mp\\\\\\\", sx, sy);\\\\nsy += gaugeLineHeight;\\\\nif ($dataSystem.optDisplayTp) {\\\\n    this.placeGauge(actor, \\\\\\\"tp\\\\\\\", sx, sy);\\\\n}\\\"\",\"PortraitStyle:func\":\"\\\"// Declare Constants\\\\nconst actor = arguments[0];\\\\nconst rect = arguments[1];\\\\n\\\\n// Make Constants\\\\nconst lineHeight = this.lineHeight();\\\\nconst gaugeLineHeight = this.gaugeLineHeight();\\\\nconst totalHeight = (lineHeight * 4.5) + (gaugeLineHeight * ($dataSystem.optDisplayTp ? 3 : 2));\\\\n\\\\n// Draw Actor Graphic\\\\nconst gw = rect.width;\\\\nconst gh = rect.height;\\\\nconst gx = rect.x;\\\\nconst gy = rect.y;\\\\nthis.drawItemActorMenuImage(actor, gx, gy, gw, gh);\\\\n\\\\n// Draw Dark Rectangle\\\\nlet sx = rect.x;\\\\nlet sy = Math.max(rect.y, rect.y + (rect.height - totalHeight));\\\\nlet sw = rect.width;\\\\nlet sh = rect.y + rect.height - sy;\\\\nthis.contents.fillRect(sx+1, sy+lineHeight/2, sw-2, sh-1-lineHeight/2, ColorManager.dimColor1());\\\\nthis.contents.gradientFillRect(sx+1, sy-lineHeight/2, sw-2, lineHeight, ColorManager.dimColor2(), ColorManager.dimColor1(), true);\\\\n\\\\n// Draw Actor Name\\\\nthis.drawText(actor.name(), sx, sy, sw, 'center');\\\\n\\\\n// Draw Actor Level\\\\nsx = rect.x + Math.round((rect.width - 128) / 2);\\\\nsy += lineHeight;\\\\nthis.drawActorLevel(actor, sx, sy);\\\\n\\\\n// Draw Actor Class\\\\nconst className = actor.currentClass().name;\\\\nsx = rect.x + Math.round((rect.width - this.textSizeEx(className).width) / 2);\\\\nsy += lineHeight;\\\\nthis.drawTextEx(className, sx, sy, sw);\\\\n\\\\n// Draw Actor Icons\\\\nsx = rect.x + Math.round((rect.width - 128) / 2);\\\\nsy += lineHeight;\\\\nthis.drawActorIcons(actor, sx, sy);\\\\n\\\\n// Draw Gauges\\\\nsx = rect.x + Math.round((rect.width - 128) / 2);\\\\nsy += lineHeight;\\\\nthis.placeGauge(actor, \\\\\\\"hp\\\\\\\", sx, sy);\\\\nsy += gaugeLineHeight;\\\\nthis.placeGauge(actor, \\\\\\\"mp\\\\\\\", sx, sy);\\\\nsy += gaugeLineHeight;\\\\nif ($dataSystem.optDisplayTp) {\\\\n    this.placeGauge(actor, \\\\\\\"tp\\\\\\\", sx, sy);\\\\n}\\\"\",\"SoloStyle:func\":\"\\\"// Declare Constants\\\\nconst actor = arguments[0];\\\\nconst rect = arguments[1];\\\\n\\\\n// Make Constants\\\\nconst lineHeight = this.lineHeight();\\\\nconst gaugeLineHeight = this.gaugeLineHeight();\\\\n\\\\n// Draw Actor Graphic\\\\nlet sx = rect.x;\\\\nlet sy = rect.y;\\\\nlet sw = rect.width;\\\\nlet sh = rect.height;\\\\n\\\\n// Portrait\\\\nif (actor.getMenuImage() !== '') {\\\\n    this.drawItemActorMenuImage(actor, rect.x, rect.y, rect.width, rect.height);\\\\n\\\\n// Everything Else\\\\n} else {\\\\n    const gx = Math.max(0, rect.x + Math.floor(((rect.width / 2) - ImageManager.faceWidth) / 2));\\\\n    const gy = Math.max(0, rect.y + rect.height - Math.ceil(lineHeight * 4.5) - ImageManager.faceHeight);\\\\n    this.drawActorGraphic(actor, gx, gy, ImageManager.faceWidth, ImageManager.faceHeight);\\\\n}\\\\n\\\\n// Draw Dark Rectangle\\\\nsh = Math.ceil(lineHeight * 4.5);\\\\nsy = rect.y + rect.height - sh;\\\\nthis.contents.fillRect(sx+1, sy+lineHeight/2, sw-2, sh-1-lineHeight/2, ColorManager.dimColor1());\\\\nthis.contents.gradientFillRect(sx+1, sy-lineHeight/2, sw-2, lineHeight, ColorManager.dimColor2(), ColorManager.dimColor1(), true);\\\\n\\\\n// Draw Actor Name\\\\nsw = Math.round(rect.width / 2);\\\\nthis.drawText(actor.name(), sx, sy, sw, 'center');\\\\n\\\\n// Draw Actor Level\\\\nsx = Math.max(0, rect.x + Math.floor(((rect.width / 2) - 128) / 2));\\\\nsy += lineHeight;\\\\nthis.drawActorLevel(actor, sx, sy);\\\\n\\\\n// Draw Actor Class\\\\nconst className = actor.currentClass().name;\\\\nsx = rect.x + Math.round(((rect.width / 2) - this.textSizeEx(className).width) / 2);\\\\nsy += lineHeight;\\\\nthis.drawTextEx(className, sx, sy, sw);\\\\n\\\\n// Draw Actor Icons\\\\nsx = rect.x + Math.round(((rect.width / 2) - 128) / 2);\\\\nsy += lineHeight;\\\\nthis.drawActorIcons(actor, sx, sy);\\\\n\\\\n// Prepare Stat Coordinates\\\\nsx = rect.x + Math.floor(rect.width / 2);\\\\nsw = rect.width / 2;\\\\nsh = rect.height;\\\\nconst sx3 = sx;\\\\nconst cw = rect.width - sx3 - 2;\\\\n\\\\n// Prepare Total Content Height to vertically center the content.\\\\nlet totalHeight = gaugeLineHeight * ($dataSystem.optDisplayTp ? 3 : 2);\\\\nif (Imported.VisuMZ_0_CoreEngine && cw >= 300) {\\\\n    const params = VisuMZ.CoreEngine.Settings.Param.DisplayedParams;\\\\n    totalHeight += lineHeight;\\\\n    totalHeight += Math.ceil(params.length / 2) * gaugeLineHeight;\\\\n}\\\\nconst equips = actor.equips();\\\\ntotalHeight += lineHeight;\\\\ntotalHeight += equips.length * lineHeight;\\\\nsy = Math.max(rect.y, rect.y + Math.floor((rect.height - totalHeight) / 2));\\\\n\\\\n// Place Gauges\\\\nthis.placeGauge(actor, \\\\\\\"hp\\\\\\\", sx, sy);\\\\nsy += gaugeLineHeight;\\\\nthis.placeGauge(actor, \\\\\\\"mp\\\\\\\", sx, sy);\\\\nif ($dataSystem.optDisplayTp) {\\\\n    sy += gaugeLineHeight;\\\\n    this.placeGauge(actor, \\\\\\\"tp\\\\\\\", sx, sy);\\\\n    sy += gaugeLineHeight;\\\\n}\\\\nlet ny = sy;\\\\n\\\\n// Following Requires VisuStella MZ's Core Engine\\\\n// Draw Additional Parameter Data if Enough Room\\\\nif (Imported.VisuMZ_0_CoreEngine && cw >= 300) {\\\\n    const params = VisuMZ.CoreEngine.Settings.Param.DisplayedParams;\\\\n    sy += lineHeight;\\\\n    const pw = Math.floor(cw / 2) - 24;\\\\n    let px = sx3;\\\\n    let counter = 0;\\\\n    for (const param of params) {\\\\n        this.resetFontSettings();\\\\n        this.drawParamText(px, sy, pw, param, true);\\\\n        this.resetTextColor();\\\\n        this.contents.fontSize -= 8;\\\\n        const paramValue = actor.paramValueByName(param, true);\\\\n        this.contents.drawText(paramValue, px, sy, pw, gaugeLineHeight, 'right');\\\\n        counter++;\\\\n        if (counter % 2 === 0) {\\\\n            px = sx3;\\\\n            sy += gaugeLineHeight;\\\\n        } else {\\\\n            px += pw + 24;\\\\n        }\\\\n    }\\\\n    ny += lineHeight;\\\\n    ny += Math.ceil(params.length / 2) * gaugeLineHeight;\\\\n}\\\\n\\\\n// Draw Actor Equipment\\\\nthis.resetFontSettings();\\\\nsx = rect.x + Math.floor(rect.width / 2);\\\\nsy = ny + lineHeight;\\\\nsw = rect.width / 2;\\\\nfor (const equip of equips) {\\\\n    if (equip) {\\\\n        this.drawItemName(equip, sx, sy, sw);\\\\n        sy += lineHeight;\\\\n        if (sy + lineHeight > rect.y + rect.height) return;\\\\n    }\\\\n}\\\"\",\"ThinStyle:func\":\"\\\"// Declare Constants\\\\nconst actor = arguments[0];\\\\nconst rect = arguments[1];\\\\n\\\\n// Draw Actor Graphic\\\\nconst gx = rect.x + (this.graphicType() === 'face' ? 1 : 0);\\\\nconst gy = rect.y + (this.graphicType() === 'face' ? 1 : 0);\\\\nconst gw = Math.min(rect.width, ImageManager.faceWidth);\\\\nconst gh = Math.min(rect.height, ImageManager.faceHeight);\\\\nthis.drawActorGraphic(actor, gx, gy, gw, gh);\\\\n\\\\n// Draw Status Stuff\\\\nconst lineHeight = this.lineHeight();\\\\nlet sx = rect.x + 160;\\\\nlet sy = rect.y + ((rect.height - lineHeight) / 2) - 2;\\\\n\\\\n// Draw Actor Data\\\\nthis.drawActorName(actor, sx, sy);\\\\nthis.drawActorLevel(actor, gx+8, rect.y + rect.height - lineHeight +1);\\\\n\\\\n// Place Gauges\\\\nsx += 180;\\\\nsy += (lineHeight - this.gaugeLineHeight()) / 2;\\\\nthis.placeGauge(actor, \\\\\\\"hp\\\\\\\", sx, sy);\\\\nsx += 140;\\\\nif ((sx + 128) > rect.x + rect.width) return;\\\\nthis.placeGauge(actor, \\\\\\\"mp\\\\\\\", sx, sy);\\\\nsx += 140;\\\\nif ((sx + 128) > rect.x + rect.width) return;\\\\nif ($dataSystem.optDisplayTp) this.placeGauge(actor, \\\\\\\"tp\\\\\\\", sx, sy);\\\"\",\"ThickerStyle:func\":\"\\\"// Declare Constants\\\\nconst actor = arguments[0];\\\\nconst rect = arguments[1];\\\\n\\\\n// Draw Actor Graphic\\\\nconst gx = rect.x + (this.graphicType() === 'face' ? 1 : 0);\\\\nconst gy = rect.y + (this.graphicType() === 'face' ? 1 : 0);\\\\nconst gw = Math.min(rect.width, ImageManager.faceWidth);\\\\nconst gh = Math.min(rect.height, ImageManager.faceHeight);\\\\nthis.drawActorGraphic(actor, gx, gy, gw, gh);\\\\n\\\\n// Draw Status Stuff\\\\nconst lineHeight = this.lineHeight();\\\\nconst gaugeLineHeight = this.gaugeLineHeight();\\\\nlet sx = rect.x + 160;\\\\nlet sy = rect.y + ((rect.height - (lineHeight * 2)) / 2) - 2;\\\\n\\\\n// Draw Actor Data\\\\nthis.drawActorLevel(actor, gx+8, rect.y + rect.height - lineHeight +1);\\\\nthis.drawActorName(actor, sx, sy);\\\\nthis.drawActorClass(actor, sx, sy + lineHeight);\\\\n//this.drawActorLevel(actor, sx, sy + lineHeight);\\\\n\\\\n// Place Gauges\\\\nsx += 180;\\\\nsy = rect.y + ((rect.height - (gaugeLineHeight * ($dataSystem.optDisplayTp ? 3 : 2))) / 2) - 2;\\\\nthis.placeGauge(actor, \\\\\\\"hp\\\\\\\", sx, sy);\\\\nthis.placeGauge(actor, \\\\\\\"mp\\\\\\\", sx, sy + gaugeLineHeight);\\\\nif ($dataSystem.optDisplayTp) this.placeGauge(actor, \\\\\\\"tp\\\\\\\", sx, sy + (gaugeLineHeight * 2));\\\\nsx += 160;\\\\n\\\\n// Following Requires VisuStella MZ's Core Engine\\\\n// Draw Additional Parameter Data if Enough Room\\\\nconst sx3 = sx;\\\\nconst sw = rect.width - sx3 - 2;\\\\nif (Imported.VisuMZ_0_CoreEngine && sw >= 300) {\\\\n    const params = VisuMZ.CoreEngine.Settings.Param.DisplayedParams;\\\\n    const pw = Math.floor(sw / 2) - 24;\\\\n    sy = rect.y + ((rect.height - (gaugeLineHeight * Math.ceil(params.length / 2))) / 2) - 2;\\\\n    let px = sx3;\\\\n    let py = rect.y + Math.floor((rect.height - (Math.ceil(params.length / 2) * gaugeLineHeight)) / 2);\\\\n    let counter = 0;\\\\n    for (const param of params) {\\\\n        this.resetFontSettings();\\\\n        this.drawParamText(px, py, pw, param, true);\\\\n        this.resetTextColor();\\\\n        this.contents.fontSize -= 8;\\\\n        const paramValue = actor.paramValueByName(param, true);\\\\n        this.contents.drawText(paramValue, px, py, pw, gaugeLineHeight, 'right');\\\\n        counter++;\\\\n        if (counter % 2 === 0) {\\\\n            px = sx3;\\\\n            py += gaugeLineHeight;\\\\n        } else {\\\\n            px += pw + 24;\\\\n        }\\\\n    }\\\\n}\\\"\"}","BreakEnd1":"----------------------------------","End Of":"Plugin Parameters","BreakEnd2":"----------------------------------"}}
];
